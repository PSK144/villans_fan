1.Generic neuron model
----------------------

clc;
close all;
clear all;
x=[1 -1];
w=[1 1];
net=0;
for i=1:2
    net=net + x(i)*w(i);
end
if net>0
    y=1
else
    y=0
end
disp("output of y:")
disp(y)

2. Activation function
-----------------------

x=-5:0.1:5;
a=1./(1+exp(-x));
subplot(2,2,1);
plot(x,a);
grid on;
title("SIGMOID FUNCTION")

a=2./(1+exp(-x));
subplot(2,2,2);
plot(x,a);
grid on;
title("BIPOLAR-SIGMOID FUNCTION")

a=x;
subplot(2,2,3);
plot(x,a);
grid on;
title("IDENTITY FUNCTION");

k=1;
for i=x
    if i>0
        a(k)=1;
    else
        a(k)=0;
    end
    k=k+1;
end
subplot(2,2,4);
plot(x,a);
grid on;
title("BI-STEP FUNCTION");

3. And logic Muculloch pitt's
-----------------------------

clc;
close all;
clear all;
x=[0 0 1 1;0 1 0 1];
target=[0 0 0 1];
for i=1:2
    w(i)=input('enter the weight');
end
theta=input('Enter the Theta')
for i=1:4
    net=0;
    for j=1:2
        net=net+x(j,i)*w(1,j);
        if net >= theta
            y(i)=1;
        else
            y(i)=0;
        end
    end
end
disp('Target');
disp(target);
disp('OUTPUT')
disp(y)

4.XNOR logic Muculloch pitt's
-----------------------------

clc;
close all;
clear all;
x=[0 0 1 1;0 1 0 1];
target=[1 0 0 1];
theta=input('Enter the Theta value');
for i=1:2
    for j=1:2
        w(i,j)=input('Enter the Weight');
    end
end
for i=1:2
    v(1,i)=input('Enter the weight');
end

for i=1:4
    for j=1:2
        outputathidden=x(:,i)'*w(:,j);
        if outputathidden >= theta
            h(j)=1;
        else
            h(j)=0;
        end
    end
    output(i)=h*v';
    if output(i) >= theta
        y(i)=0;
    else
        y(i)=1;
    end
end
disp('Target');
disp(target)
disp('Your output')
disp(y)
     

5. And logic Hebbian model
   ------------------------

clc;
close all;
clear all;
x=[-1 1];
t=[1 -1];
w=[0];
b=0;
for i=1:2
    w=w+(x(i)*t(i));
    b=b+t(i);
end
xlim([-4 4]);
ylim([-4 4]);
grid on;
hold on;
for i=1:2
    if t(i)==1
        plot(x(1,i),0,'og');
        hold on;
    else
        plot(x(1,i),0,'or');
        hold on;
    end
end
disp("weight");
disp(w);
lx=-b/2;
lx1=b/-2;
plot([lx lx1],[-4 4],'r');
hold on;


6.NOT logic Hebbian model
   ---------------------

clc;
close all;
clear all;
x=[-1 -1 1 1;-1 1 -1 1];
t=[-1 -1 -1 1];
w=[0 0];
b=0;
for i=1:4
    for j=1:2
        w(j)=w(j)+(t(i)*x(j,i));
    end
    b=b+t(i);
end
xlim([-2 2])
ylim([-2 2])
grid on;
hold on;
for i=1:4
    if t(i)==1
        plot(x(1,i),x(2,i),'or')
        hold on;
    else
        plot(x(1,i),x(2,i),'oG')
        hold on;
    end
end
lx=(-(w(2)*-2)-b)/w(1);
lx1=(-(w(2)*2)-b)/w(1);
disp([lx lx1]);
plot([lx lx1],[-2 2],'r');
hold on;
disp('Weights');
disp(w);

7. AND Perceptron
   --------------

clc;clear all;close all;
x=[1 1;1 -1;-1 1;-1 -1];
t=[1 -1 -1 -1];
w=[0 0];
b=0;
thresh=0;
for i=1:4
    yin=b+x(i,:)*w';
    if yin>thresh
        y=1;
    end
    if yin>=-thresh & yin<=thresh
        y=0;
    end
    if yin<-thresh
        y=-1;
    end
    if y~=t(i)
        w=w+t(i)*x(i,:);
        b=b+t(i);
    end
end
disp('The weights of neuron :');
disp(w);
xlim([-4 4])
ylim([-4 4])
hold on;
for i=1:4
    if t(i)==1
        plot(x(i,1),x(i,2),'or')
        hold on;
    else
        plot(x(i,1),x(i,2),'oG')
        hold on;
    end
end
lx=(-(w(2)*-3)-b)/w(1);    % x1 for x2=-2
lx1=(-(w(2)*3)-b)/w(1);    % x1 for x2=2
plot([lx lx1],[-3 3],'r');
hold on;


8.NOT using Perceptron
  ---------------------

clc;clear all;close all;
x=[1 -1];
t=[-1 1];
w=0;
b=0;
thresh=0;
for i=1:2
    yin=b+x(i)*w;
    if yin>thresh
        y=1;
    end
    if yin>=-thresh & yin<=thresh
        y=0;
    end
    if yin<-thresh
        y=-1;
    end
    if y~=t(i)
        w=w+t(i)*x(i);
        b=b+t(i);
    end
end
disp(w);
xlim([-4 4])
ylim([-4 4])
grid on;
hold on;
for i=1:2
    if t(i)==1
        plot(x(i),0,'or')
        hold on;
    else
        plot(x(i,1),0,'oG')
        hold on;
    end
end
disp('Weight : ');
disp(w);
lx=-b/2;
lx1=-b/-2;
plot([lx lx1],[2 -2],'r');
hold on;
        
        
    
9. XOR using Back propogation
-----------------------------

function f=dsigm(x)
   f=sigm(x)*(1-sigm(x));
end


function f=sigm(x)
   f=1/(1+exp(-x));
end


clear all;close all;clc;
v=rand(2,4);
v1=zeros(2,4);
b1=rand(1,4);
b2=rand(1,1);
w=rand(4,1);
w1=zeros(4,1);
x=[1 1 0 0; 1 0 1 0;];
t=[0 1 1 0];
alph=0.2;
mf=0.1;
cond=1;
it=1;
while(cond==1)
    e=0;
    for i=1:4
        for j=1:4
            zinj(j)=b1(j);
            for k=1:2
                zinj(j)=zinj(j)+x(k,i)*v(k,j);
            end
            z(j)=sigm(zinj(j));
        end
        yin=b2+z*w;
        y(i)=sigm(yin);
        delk=(t(i)-y(i))*dsigm(yin);
        delw=alph*delk*z'+mf*(w-w1);
        delb2=alph*delk;
        delinj=delk*w;
        for j=1:4
            delj(j,1)=delinj(j,1)*dsigm(zinj(j));
        end
        for j=1:4
            for k=1:2
                delv(k,j)=alph*delj(j,1)*x(k,i)+mf*(v(k,j)-v1(k,j));
            end
        end
        delb1=alph*delj;
        w1=w;
        v1=v;
        w=w+delw;
        v=v+delv;
        b1=b1+delb1';
        e=e+(t(i)-y(i))^2;
    end
    if e<0.005
        cond=0;
    end
    it=it+1;
    disp(e);
end
disp(y);



10.XOR using Radial basic Function
  --------------------------------


function f=gaudist1(x,t,si)
  f=0
  for i=1:2
    f=f+(x(i)-t(i))^2;
  end
  f=exp(-1*sqrt(f)/(2*si));
end


function f=sqrdist(x,y)
  f=(sum((x-y).^2));
end


function f=sigmc(td)
  for i=1:4
    co=0;
    for j=1:4
      if i~=j
        co=co+1;
        s(co)=sqrdist(td(:,i)',td(:,j)');
      end
    end
    s=sort(s);
    f(i)=(0.5*sum(s(1:2)));
  end
end


clear all;
close all;
clc;
v=ones;
w=[-1,1,1,-1];
w1=zeros(4,1);
x=[0 0 1 1;0 1 0 1;];
t=[0 1 1 0];
td=[0 0 1 1;0 1 0 1;];
si=sigmc(td);
for i=1:4
    for j=1:4
        z(i,j)=gaudist1(x(:,i)',td(:,j)',si(i));
    end
    yin=z(i,:)*w';
    if yin>0
        y(i)=1;
    else
        y(i)=0;
    end
end
disp('Activation function : ');
disp(z);
disp('Output : ');
disp(y);
xlim([-2 2])
ylim([-2 2])
grid on;
hold on;
for i=1:4
    if y(i)==1
        plot(x(1,i),x(2,i),'og');
        hold on;
    else
        plot(x(1,i),x(2,i),'or');
        hold on;
    end
end
